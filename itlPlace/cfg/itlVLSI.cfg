data:
{
    cellsLimitGrow = { percent = 1.25; min = 128; };
    netsLimitGrow = { percent = 1.25; min = 128; };
    pinsLimitGrow = { percent = 1.25; min = 128; };
    netPinsLimitGrowCoeff = { percent = 1.25; min = 128; };
    routingLayersLimitGrow = { percent = 1.20; min = 1; };
    pinTypesLimitGrow = { percent = 1.25; min = 4; };
    macroTypesLimitGrow = { percent = 1.20; min = 2; };
    timingArcsTypesLimitGrow = { percent = 1.25; min = 4; };
    sitesLimitGrow = { percent = 1.0; min = 1; };
    placementRowsLimitGrow = { percent = 1.25; min = 4; };
    internalSteinerPointsGrow = { percent = 1.25; min = 128; };
    criticalPathPintsLimitGrow = { percent = 1.25; min = 128; };
    criticalPathsLimitGrow = { percent = 1.25; min = 4; };
    steinerPointsToPinsRatio = 1.0;
    skipSpecialCells = false;
};

params:
{
  def = "tv80.def";
  target_clock_cycle = 0.0;
};

benchmark="@$(params.techname:IWLS).benchmark";

SCL:
{
    benchmark:
    {
        def = "@params.def";
        lef = "SCL/cutted.lef";
        lib = "SCL/cutted.lib";
        useTechMapping = false;
        exportDEFFileName = ""; //if empty will be placed to the ExportDEF folder
        target_clock_cycle = "@params.target_clock_cycle";
        CanDoTiming = true;
    };
};

IWLS:
{
    benchmark:
    {
        def = "@params.def";
        lef = "./technology/GSCLib_3.0.lef";
        lib = "./technology/GSCLib_3.0.lib";
        useTechMapping = false;
        exportDEFFileName = ""; //if empty will be placed to the ExportDEF folder
        target_clock_cycle = "@params.target_clock_cycle";
        CanDoTiming = true;
    };
};

NangateMapped:
{
    benchmark:
    {
        def = "@params.def";
        lef = "NangateOpenCellLibrary_PDKv1_2_v2008_10.lef";
        lib = "NangateOpenCellLibrary_PDKv1_2_v2008_10_typical_conditional_nldm.lib";
        useTechMapping = true;
        exportDEFFileName = ""; //if empty will be placed to the ExportDEF folder
        target_clock_cycle = "@params.target_clock_cycle";
        CanDoTiming = true;
    };
};

Nangate:
{
    benchmark:
    {
        def = "@params.def";
        lef = "NangateOpenCellLibrary_PDKv1_2_v2008_10.lef";
        lib = "NangateOpenCellLibrary_PDKv1_2_v2008_10_typical_conditional_nldm.lib";
        useTechMapping = false;
        exportDEFFileName = ""; //if empty will be placed to the ExportDEF folder
        target_clock_cycle = "@params.target_clock_cycle";
        CanDoTiming = true;
    };
};

ISPD:
{
    benchmark:
    {
        def = "@params.def";
        lef = "@params.lef";
        useTechMapping = false;
        exportDEFFileName = ""; //if empty will be placed to the ExportDEF folder
        CanDoTiming = false;
    };
};

plotter:
{
    enabled = false;
    borderSpace = 5;
    windowHeight = 800;
    histogramWindowHeight = 300;
    histogramWindowWidth = 1000;
    autoRefreshStep = 100;
    createVideo = false;
    saveImages = false;
    saveMilestoneImages = true;
    embeedMilestones = true;
    fps = 8;
    textSpaceHeight = 20;
    textSize = 0.5 ;//1 приблизительно равно 20му шрифту
    pixDirectory = ".\\pix\\";
    milestonePixDirectory = ".\\pix\\milestones\\";
    windowName = "Superhero Movie";

    CompressMilestoneImages = true;
    MilestonePaletteSize = 16;
    CompressImages = true;
    ImagesPaletteSize = 16;
    PNGCompressor = "pngquant.exe";
};

LEFParser:
{
    startLayersCount = 6;
    startPinsCount = 224;
    startMacrosCount = 42;
    startSitesCount = 1;
};

DEFParser:
{
    cellsReservePercent = 1.25;
    primariesReservePercent = 1.25;
    pinsReservePercent = 1.25;
    netsReservePercent = 1.25;
    placementRowsStartCount = 100;
};

LIBParser:
{
    startArcsCount = 128;
};

DesignFlow:
{
    //PRE-RUN SECTION
    SkipSpecialNets = false;
    SkipBrokenNets = false;

    //MACRO LOOP SECTION
    nMacroIterations = 0;
    LoopRandomPlacement = false;
    LoopGlobalPlacement = false;
    LoopLR = false;
    LoopLegalization = false;
    LoopDetailedPlacement = false;
    LoopBuffering = false;
    LoopRemoveNewBuffering = false;
    LoopNew_Buffering = false;
    LoopBufRandomPlacement = false;
    LoopBufGlobalPlacement = false;
    LoopBufLR          = false;
    LoopBufLegalization = false;
    LoopBufDetailedPlacement = false;

    //STANDARD PLACEMENT SECTION
    RandomPlacement = false;
    GlobalPlacement = false;
    LR          = false;
    Legalization = false;
    DetailedPlacement = false;
    LRSizing = false;

    //REPEATERS INSERTION SECTION
    Buffering = false;
    RemoveNewBuffering = false;
    New_Buffering = false;
    BufRandomPlacement = false;
    BufGlobalPlacement = false;
    BufLR          = false;
    BufLegalization = false;
    BufDetailedPlacement = false;

    //MISCELLANEOUS
    DrawCongestionMap = false;
    FGRRouting = false;

    HippocratePlacement = false;
};

MacroLoop:
{
    QAcriteria = "LTNS";
    LSE:
    {
        Clustering:
        {
            useClusteringInformationFromFile  = false;
        };
    };
};

Clustering:
{
    desiredNumberOfClustersAtEveryBin = 1;
    clusterRatio                      = 5;
    desiredFinalNumberOfClusters      = 6000;
    clustersAreaTolerance             = 1.5;
    useClusteringInformationFromFile  = false;
    clusteringInformationSaveFileName = ""; //ClusteringInformation_BENCHMARKNAME_CELLSNUMBER.ci if string is empty
    clusteringInformationLoadFileName = ""; //ClusteringInformation_BENCHMARKNAME_CELLSNUMBER.ci if string is empty
    deleteDuplicatingNets             = false;
    useNetWeights                     = false; //perform or not weighting (APlace or SGNW) during relaxation
};

GlobalPlacement:
{
    randSeed = 51117;
    batchSizeForvdExp = 1000;
    bufferName = "BUF_ITL";
    bufferCountUpperBound = 0.0; //set to 0 if you want to disable joint algorithm

    placeToTheCenter = true;
    shufflePercent = 0.0;

    useQAClass = false;
    QAcriteria = "LHPWL";
    earlyExit = false;
    improvementTreshold = -0.00; //-0.01 means 1% improvement decrease allowed
    nTolerantIterations = 1;
    nConvergedIterations = 2;

    useLogSumExp = false;
    useSumOfDelays = false;
    useLR = false;
    useSpreading = false;
    useUnidirectSpreading = true;  //used only with useSpreading = true
    useBorderBounds = true;

    Weights:
    {
		useSprUpdateFunction = false;
		useLseUpdateFunction = false;
        sprUpdateFunction = 2;  //R^x
        lseUpdateFunction = 7;  //P^x
        N = 1.0;
        M = 1.0;
        R = 5000.0;
        P = 1.1;

        lseInitialRatio = 1.0;
        lrInitialRatio = 1.0;
        sprInitialRatio = 0.05;

        lseDesiredRatio = 1.0;
        sprDesiredRatio = 1.1;

        lseUpdateMultiplier = 2.0;
        lrUpdateMultiplier = 2.0;
        sprUpdateMultiplier = 1.8;
    };

    alphaMultiplier = 0.5;
    potentialRatio = 2.1; //must be greater than 0.5

    LagrangianRelaxation:
    {
        muLR     = 0.5;

        theta    = 1.1;
        minFactor = 0.01;
        referenceValue = 100;

        Reporter:
        {
            verbose = false;
            plotMus = false;
            order = "CriticalPath"; //"Topological"
        };
    };

    TAOOptions:
    {
        commandLine               = ""; //-tao_monitor
        method                    = "tao_blmvm";
        nOuterIterations          = 100;
        nInnerIterations          = 100;

        fatol = 1.0e-14;
        frtol = 1.0e-14;
        catol = 1.0e-8;
        crtol = 1.0e-8;
    };

    Plotting:
    {
        plotWires = false;
        plotSolverState = false;
        saveTAOmilestones = false;
        plotWait        = 1;
        gradientScaling = 0.0;

        BinOccupancyMap:
        {
            plotBinOccupancy = false;
            plotBuffers = false;
            plotCells = false;
        };
    };

    UseBuffering = false;

	PQAT:
	{
		showPercents = false;
		Columns = ["Objective", "ObHPWL", "ObLR", "ObSpr", "gHPWL", "gLR", "gSpr", "HPWL", "LHPWL", "TNS", "LTNS", "WNS", "LWNS"];
	};
};

Abacus:
{
    maxDeviationInRows = 1000000;
    usePlotter = false;
    plotterStep = 500;
    plotterSpeed = 1;
    drawSites = false;
    useWeights = false;
    weightMultiplier = 1.0;
};

Legalization:
{
    doReport = true;
    Abacus:
    {
        maxDeviationInRows = 1000000;
        usePlotter = false;
        plotterStep = 500;
        plotterSpeed = 1;
        drawSites = false;
        useWeights = false;
    };
    PQAT:
	{
		showPercents = true;
		Columns = ["HPWL", "TWL", "TNS", "WNS"];
	};
};

NetWeighting:
{
    useNetWeights = false;
    netWeightsImportFileName = "";
    netWeightsExportFileName = "";
    method = "APlace";
    normalize = false;

    APlace:
    {
        u    = 0.3;
        beta = 2.0;
        aggregationMethod = "sum";
    };
    SensitivityGuidedNetWeighting:
    {
        minWeight = 1.0;
        alpha     = 0.6;
        C         = 3227.0;
    };
};

DetailedPlacement:
{
    StoppingCriteria = 0.001;
    useConstraints = false;

    HorizontalSearch:
    {
        horizontalGroupSize = 4;
        active = false;
        plotter: {enabled = false;};
    };

    GlobalSwap:
    {
        optimalRegionHalfWidth = 12;
        optimalRegionHalfHeight = 4;
        tmp_drawOptimalSites = false;
        active = false;
        plotter: {enabled = false;};
    };

    VerticalSearch:
    {
        searchZoneSize = 7;
        nRowsToSearch = 6;
        active = false;
        plotter: {enabled = false;};
    };
};

HippocratePlacement:
{
    SWAP = false;
    MOVE = false;
    LOCALMOVE = false;
    COMPACT = false;
    CENTER = false;

    KamaevCheckConstraints = true;

    PathsInCriticalOrder = true;

    LogEveryIteration=false;
};

DelayCalculator:
{
    initialNetPointsReserve = 90;
};

Timing:
{
    reportSkippedNets = false;
    pointsPerPathBase = 20;
    SignalDirectionsUsed = 1; //rise\fall
    RCE:
    {
        LayersUsed = 0;//0 - lumped (=1 with simplified C extraction), 1 or 2
    };
};

CriticalPaths:
{
    countLogReportCriticalPaths = 0;  //set to -1 if you want to print all the critical paths
    countPlotCriticalPaths = 0;       //set to -1 if you want to plot all the critical paths
    plotWait = 1;
    thicknessLines = 2;
};

Buffering:
{
    LSE: { Clustering: { useClusteringInformationFromFile  = false; }; };
    SOD: { Clustering: { useClusteringInformationFromFile  = false; }; };
    LR:  { Clustering: { useClusteringInformationFromFile  = false; }; };

    DefaultBuffer:
    {
        Macro="BUF_ITL";
        InputPin = "A";
        OutputPin = "Y";
    };
    Percent = 1.00;
    Iterations = 15;
    DoIterative = false;

    Legalization:
    {
        doReport = false;
    };
};

New_Buffering:
{
    TypeNetListBuffering = 0; //0 - буферизация нетов входящих в все критические пути; 1 - PathBased
	TypePathBased = 0;// 0 - жадный алгоритм, 1 - дробление критических путей

    DefaultBuffer:
    {
        Macro="BUF_ITL";
        InputPin = "A";
        OutputPin = "Y";
    };
    UseOnlyDefaultBuffer = true;
    BufferList = "BUF_ITL,BUF_INVX1,BUF_INVX4,BUF_INVX8";
    BufferListLength = 4;

    //tree
    TypePartition = 0; //0 - обычное линейное разбиение, 1 - динамическое распределение точек,
                       //2 - легальное распределение точек (использовать только с 1 или 2 типом буферизации)
    IsInsertInSourceAndSink = true;
    Interval = 2;
    TypeBufferingAlgorithm = 1; //0 - рекурсивный обход дерева, 1 - линейный обход дерева,
								//2 - линейный обход дерева и измененное вычисление длин ребер (TODO: ПРИДУМАТЬ НОРМАЛЬНУЮ ФОРМУЛИРОВКУ)
    TypeModificationVanGinnekenList = 0; //0 - классические правила формирования и изменения списка вариантов,
                                         //1 - количество вставляемых буферов ограничено MaxBufferCount
                                         //2 - полный перебор вариантов
    TypeBufferAddition = 0; //0 - обычная вставка буферов, 1 - вставка с легализацией
    MaxCountRepeatNet = 0;

    //path-based
    NumberBufferedAtOnceCriticalPaths = 1; //размер пачки буферизуемых путей
    LimitationCountCriticalPath = 4; //означает что будет произведено итераций буферизации не более чем CriticalPaths.Count() * LimitationCountCriticalPath, 0 - буферизуем до конца;
    ReRoutingSteinerTree = true;

    //joint
    SizeBufferMultiplier = 1.0; //0.5313443074;//0.102;
    AdaptiveSizeBufferMultiplier = false;
    TotalAllowableBuffersArea = 0.0; //0 - буферизация без ограничения, 1 - площадь буферов совпадает с площадью буферов
    NumberMetaIterationStartBuffering = 0;//начиная с какой итерации кластеризации начнет работать буферизация в совместном алгоритме

    //debug
    MaxBufferCount = 0; //!!!если равен 0 то нет ограничений на количество вставляемых буферов
    CountPinInBufferingInterconnection = 0; //если равен 0 то нет ограничений
    IsNotExactPinCountRequired = true;
    NameBufferingNet = "";//"From    i_tv80_core_BusA_reg\\[2\\]Q    To    i_tv80_core_i_reg_RegsL_reg[7]\\[7\\]D";//"n_4755";
    IsNetContainPrimaryPin = true;

    Legalization:
    {
        doReport = false;
    };

    Plotting:
    {
        PlotSteinerPoint = false;
        PlotVGTree = false;
        PlotNets = false;
        PlotBuffer = false;
	    PlotBinGridValue = false;
        PlotterWaitTime = 1;
    };

    Reporting:
    {
        reportParameters = false;
        reportBufferInfo = false;

        PrintNetInfo = false;
        PrintVGVariantsList = false;
        PrintCriticalPathsInfo = false;
        PrintTimingAfterBufferingCriticalPaths = false;
        PrintSumPotencial = false;
    };
};

CongestionMap:
{
    nHorTiles  = 20;
    nVertTiles = 20;
    nMaxLines  = 50; //all wires
    nMaxCLines = 10; //critical wires
    nMaxPins   = 20;
};

logger = "@Logger";
Logger: //could not be overridden
{
    // DEFAULTLEVEL    0
    // DEBUGLEVEL      1
    // INFOLEVEL       2
    // WARNINGLEVEL    3
    // ERRORLEVEL      4
    // FATALERRORLEVEL 5
    // ALERTLEVEL      6

    //displayLevel = 1;
    //defaultLogLevel = 2;
    //defaultAssertLevel = 3;
    maximumDisplayWarnings = 1000;
    maximumDisplayErrors = 30000;
    maximumErrors = 30000;
    exitOnAssert = false;
    logFile = "stdout";

    Verbose = true;
    LogDisplayLevel = 1;

    duplicateConsoleOutput = true;
    writeHTML = false;
    EmbeedCSS = true;
    CSSFileName = "itlPlace.css";
    HTMLLogFile = "itlOutput";
    DupLogFile = "itlOutput";
    PrintStartInformations = true;
};

Config:
{
    Trace = false;
    MaxSearchDepth = 100;
    WarnMissingOptions = true;
    WarnNondefaultOptions = false;
    Replicate = true;
    WarnOnChange = true;
};

FLUTE = { Accuracy = 3; }; //could not be overridden

tech_mapping:
{
    enabled = "@benchmark.useTechMapping";

    defaultSiteName = "NCSU_FreePDK_45nm";
    //XScaleFactor = 0.28787878787878787878787878787879;
    XScaleFactor = 0.17676767676767676767676767676768;
    YScaleFactor = 0.17676767676767676767676767676768;

    AND2_X1 =
    {
        AND2_X1 = "AND2X1";
        VDD = "POWR";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        ZN  = "Y";
    };

    AND2_X2 =
    {
        AND2_X2 = "";
        VDD = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    AND2_X4 =
    {
        AND2_X4 = "";
        VDD = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    AND3_X1 =
    {
        AND3_X1 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    AND3_X2 =
    {
        AND3_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    AND3_X4 =
    {
        AND3_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    AND4_X1 =
    {
        AND4_X1 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    AND4_X2 =
    {
        AND4_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    AND4_X4 =
    {
        AND4_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    ANTENNA_X1 =
    {
        ANTENNA_X1 = "";
        A   = "";
        VDD = "";
        VSS = "";
    };

    AOI211_X1 =
    {
        AOI211_X1 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
        C2  = "";
        C1  = "";
    };

    AOI211_X2 =
    {
        AOI211_X2 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
        C2  = "";
        C1  = "";
    };

    AOI211_X4 =
    {
        AOI211_X4 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
        C2  = "";
        C1  = "";
    };

    AOI21_X1 =
    {
        AOI21_X1 = "";
        A   = "";
        VDD = "";
        B1  = "";
        VSS = "";
        B2  = "";
        ZN  = "";
    };

    AOI21_X2 =
    {
        AOI21_X2 = "AOI21X1";
        A   = "B0";
        VDD = "POWR";
        B1  = "A0";
        VSS = "GRND";
        B2  = "A1";
        ZN  = "Y";
    };

    AOI21_X4 =
    {
        AOI21_X4 = "";
        A   = "";
        VDD = "";
        B1  = "";
        VSS = "";
        B2  = "";
        ZN  = "";
    };

    AOI221_X1 =
    {
        AOI221_X1 = "";
        A   = "";
        VDD = "";
        B1  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    AOI221_X2 =
    {
        AOI221_X2 = "";
        A   = "";
        VDD = "";
        B1  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    AOI221_X4 =
    {
        AOI221_X4 = "";
        A   = "";
        VDD = "";
        B1  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    AOI222_X1 =
    {
        AOI222_X1 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        A2  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    AOI222_X2 =
    {
        AOI222_X2 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        A2  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    AOI222_X4 =
    {
        AOI222_X4 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        A2  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    AOI22_X1 =
    {
        AOI22_X1 = "AOI22X1";
        VDD = "POWR";
        B1  = "B0";
        A1  = "A0";
        VSS = "GRND";
        B2  = "B1";
        A2  = "A1";
        ZN  = "Y";
    };

    AOI22_X2=
    {
        AOI22_X2 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        VSS = "";
        B2  = "";
        A2  = "";
        ZN  = "";
    };

    AOI22_X4 =
    {
        AOI22_X4 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        VSS = "";
        B2  = "";
        A2  = "";
        ZN  = "";
    };

    BUF_X1 =
    {
        BUF_X1 = "BUFX1";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
    };

    BUF_X16 =
    {
        BUF_X16 = "";
        Z   = "";
        A   = "";
        VDD = "";
        VSS = "";
    };

    BUF_X2 =
    {
        BUF_X2 = "";
        Z   = "";
        A   = "";
        VDD = "";
        VSS = "";
    };

    BUF_X32 =
    {
        BUF_X32 = "";
        Z   = "";
        A   = "";
        VDD = "";
        VSS = "";
    };

    BUF_X4 =
    {
        BUF_X4 = "BUFX3";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
    };

    BUF_X8 =
    {
        BUF_X8 = "";
        Z   = "";
        A   = "";
        VDD = "";
        VSS = "";
    };

    CLKBUF_X1 =
    {
        CLKBUF_X1 = "CLKBUFX1";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
    };

    CLKBUF_X2 =
    {
        CLKBUF_X2 = "CLKBUFX2";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
    };

    CLKBUF_X3 =
    {
        CLKBUF_X3 = "CLKBUFX3";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
    };

    CLKGATETST_X1 =
    {
        CLKGATETST_X1 = "";
        SE  = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    CLKGATETST_X2 =
    {
        CLKGATETST_X2 = "";
        SE  = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    CLKGATETST_X4 =
    {
        CLKGATETST_X4 = "";
        SE  = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    CLKGATETST_X8 =
    {
        CLKGATETST_X8 = "";
        SE  = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    CLKGATE_X1 =
    {
        CLKGATE_X1 = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    CLKGATE_X2 =
    {
        CLKGATE_X2 = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    CLKGATE_X4 =
    {
        CLKGATE_X4 = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    CLKGATE_X8 =
    {
        CLKGATE_X8 = "";
        VDD = "";
        VSS = "";
        GCK = "";
        E   = "";
        CK  = "";
    };

    DFFRS_X1 =
    {
        DFFRS_X1 = "DFFSRX1";
        QN  = "QN";
        SN  = "SN";
        RN  = "RN";
        VDD = "POWR";
        Q   = "Q";
        VSS = "GRND";
        D   = "D";
        CK  = "CK";
    };

    DFFRS_X2 =
    {
        DFFRS_X2 = "";
        QN  = "";
        SN  = "";
        RN  = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    DFFR_X1 =
    {
        DFFR_X1 = "";
        QN  = "";
        RN  = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    DFFR_X2 =
    {
        DFFR_X2 = "";
        QN  = "";
        RN  = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    DFFS_X1 =
    {
        DFFS_X1 = "";
        QN  = "";
        SN  = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    DFFS_X2 =
    {
        DFFS_X2 = "";
        QN  = "";
        SN  = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    DFF_X1 =
    {
        DFF_X1 = "DFFX1";
        QN  = "QN";
        VDD = "POWR";
        Q   = "Q";
        VSS = "GRND";
        D   = "D";
        CK  = "CK";
    };

    DFF_X2 =
    {
        DFF_X2 = "";
        QN  = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    DLH_X1 =
    {
        DLH_X1 = "TLATX1";
        VDD = "POWR";
        Q   = "Q";
        VSS = "GRND";
        D   = "D";
        G   = "C";
    };

    DLH_X2 =
    {
        DLH_X2 = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        G   = "";
    };

    DLL_X1 =
    {
        DLL_X1 = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        GN  = "";
    };

    DLL_X2 =
    {
        DLL_X2 = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        GN  = "";
    };

    FA_X1 =
    {
        FA_X1 = "ADDFX1";
        S   = "S";
        A   = "A";
        VDD = "POWR";
        CO  = "CO";
        VSS = "GRND";
        CI  = "CI";
        B   = "B";
    };

    FILLCELL_X1 =
    {
        FILLCELL_X1 = "FILL1";
        VDD = "POWR";
        VSS = "GRND";
    };

    FILLCELL_X16 =
    {
        FILLCELL_X16 = "";
        VDD = "";
        VSS = "";
    };

    FILLCELL_X2 =
    {
        FILLCELL_X2 = "FILL2";
        VDD = "POWR";
        VSS = "GRND";
    };

    FILLCELL_X32 =
    {
        FILLCELL_X32 = "";
        VDD = "";
        VSS = "";
    };

    FILLCELL_X4 =
    {
        FILLCELL_X4 = "FILL4";
        VDD = "POWR";
        VSS = "GRND";
    };

    FILLCELL_X8 =
    {
        FILLCELL_X8 = "FILL8";
        VDD = "POWR";
        VSS = "GRND";
    };

    HA_X1 =
    {
        HA_X1 = "ADDHX1";
        S   = "S";
        A   = "A";
        VDD = "POWR";
        CO  = "CO";
        VSS = "GRND";
        B   = "B";
    };

    INV_X1 =
    {
        INV_X1 = "INVX1";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        ZN  = "Y";
    };

    INV_X16 =
    {
        INV_X16 = "";
        A   = "";
        VDD = "";
        VSS = "";
        ZN  = "";
    };

    INV_X2 =
    {
        INV_X2 = "INVX2";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        ZN  = "Y";
    };

    INV_X32 =
    {
        INV_X32 = "";
        A   = "";
        VDD = "";
        VSS = "";
        ZN  = "";
    };

    INV_X4 =
    {
        INV_X4 = "INVX4";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        ZN  = "Y";
    };

    INV_X8 =
    {
        INV_X8 = "INVX8";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        ZN  = "Y";
    };

    LOGIC0_X1 =
    {
        LOGIC0_X1 = "";
        Z   = "";
        VDD = "";
        VSS = "";
    };

    LOGIC1_X1 =
    {
        LOGIC1_X1 = "";
        Z   = "";
        VDD = "";
        VSS = "";
    };

    MUX2_X1 =
    {
        MUX2_X1 = "MX2X1";
        Z   = "Y";
        S   = "S0";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        B   = "B";
    };

    MUX2_X2 =
    {
        MUX2_X2 = "";
        Z   = "";
        S   = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
    };

    NAND2_X1 =
    {
        NAND2_X1 = "NAND2X1";
        VDD = "POWR";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        ZN  = "Y";
    };

    NAND2_X2 =
    {
        NAND2_X2 = "NAND2X2";
        VDD = "POWR";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        ZN  = "Y";
    };

    NAND2_X4 =
    {
        NAND2_X4 = "";
        VDD = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    NAND3_X1 =
    {
        NAND3_X1 = "NAND3X1";
        VDD = "POWR";
        A3  = "C";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        ZN  = "Y";
    };

    NAND3_X2 =
    {
        NAND3_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    NAND3_X4 =
    {
        NAND3_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    NAND4_X1 =
    {
        NAND4_X1 = "NAND4X1";
        VDD = "POWR";
        A3  = "C";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        A4  = "D";
        ZN  = "Y";
    };

    NAND4_X2 =
    {
        NAND4_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    NAND4_X4 =
    {
        NAND4_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    NOR2_X1 =
    {
        NOR2_X1 = "NOR2X1";
        VDD = "POWR";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        ZN  = "Y";
    };

    NOR2_X2 =
    {
        NOR2_X2 = "";
        VDD = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    NOR2_X4 =
    {
        NOR2_X4 = "";
        VDD = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    NOR3_X1 =
    {
        NOR3_X1 = "NOR3X1";
        VDD = "POWR";
        A3  = "C";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        ZN  = "Y";
    };

    NOR3_X2 =
    {
        NOR3_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    NOR3_X4 =
    {
        NOR3_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    NOR4_X1 =
    {
        NOR4_X1 = "NOR4X1";
        VDD = "POWR";
        A3  = "C";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        A4  = "D";
        ZN  = "Y";
    };

    NOR4_X2 =
    {
        NOR4_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    NOR4_X4 =
    {
        NOR4_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    OAI211_X1 =
    {
        OAI211_X1 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
        C2  = "";
        C1  = "";
    };

    OAI211_X2 =
    {
        OAI211_X2 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
        C2  = "";
        C1  = "";
    };

    OAI211_X4 =
    {
        OAI211_X4 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
        C2  = "";
        C1  = "";
    };

    OAI21_X1 =
    {
        OAI21_X1 = "OAI21X1";
        A   = "B0";
        VDD = "POWR";
        B1  = "A0";
        VSS = "GRND";
        B2  = "A1";
        ZN  = "Y";
    };

    OAI21_X2 =
    {
        OAI21_X2 = "";
        A   = "";
        VDD = "";
        B1  = "";
        VSS = "";
        B2  = "";
        ZN  = "";
    };

    OAI21_X4 =
    {
        OAI21_X4 = "";
        A   = "";
        VDD = "";
        B1  = "";
        VSS = "";
        B2  = "";
        ZN  = "";
    };

    OAI221_X1 =
    {
        OAI221_X1 = "";
        A   = "";
        VDD = "";
        B1  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    OAI221_X2 =
    {
        OAI221_X2 = "";
        A   = "";
        VDD = "";
        B1  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    OAI221_X4 =
    {
        OAI221_X4 = "";
        A   = "";
        VDD = "";
        B1  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    OAI222_X1 =
    {
        OAI222_X1 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        A2  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    OAI222_X2 =
    {
        OAI222_X2 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        A2  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    OAI222_X4 =
    {
        OAI222_X4 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        A2  = "";
        ZN  = "";
        C1  = "";
        VSS = "";
        B2  = "";
        C2  = "";
    };

    OAI22_X1 =
    {
        OAI22_X1 = "OAI22X1";
        VDD = "POWR";
        B1  = "B0";
        A1  = "A0";
        VSS = "GRND";
        B2  = "B1";
        A2  = "A1";
        ZN  = "Y";
    };

    OAI22_X2 =
    {
        OAI22_X2 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        VSS = "";
        B2  = "";
        A2  = "";
        ZN  = "";
    };

    OAI22_X4 =
    {
        OAI22_X4 = "";
        VDD = "";
        B1  = "";
        A1  = "";
        VSS = "";
        B2  = "";
        A2  = "";
        ZN  = "";
    };

    OAI33_X1 =
    {
        OAI33_X1 = "OAI33X1";
        VDD = "POWR";
        B1  = "B0";
        A1  = "A0";
        A2  = "A1";
        ZN  = "Y";
        A3  = "A2";
        B3  = "B2";
        VSS = "GRND";
        B2  = "B1";
    };

    OR2_X1 =
    {
        OR2_X1 = "OR2X1";
        VDD = "POWR";
        A1  = "A";
        VSS = "GRND";
        A2  = "B";
        ZN  = "Y";
    };

    OR2_X2 =
    {
        OR2_X2 = "";
        VDD = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    OR2_X4 =
    {
        OR2_X4 = "";
        VDD = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    OR3_X1 =
    {
        OR3_X1 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    OR3_X2 =
    {
        OR3_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    OR3_X4 =
    {
        OR3_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        ZN  = "";
    };

    OR4_X1 =
    {
        OR4_X1 = "OR4X1";
        VDD = "POWR";
        A3  = "B";
        A1  = "A";
        VSS = "GRND";
        A2  = "C";
        A4  = "D";
        ZN  = "Y";
    };

    OR4_X2 =
    {
        OR4_X2 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    OR4_X4 =
    {
        OR4_X4 = "";
        VDD = "";
        A3  = "";
        A1  = "";
        VSS = "";
        A2  = "";
        A4  = "";
        ZN  = "";
    };

    SDFFRS_X1 =
    {
        SDFFRS_X1 = "SDFFSRX1";
        QN  = "QN";
        SN  = "SN";
        SE  = "SE";
        RN  = "RN";
        VDD = "POWR";
        Q   = "Q";
        SI  = "SI";
        VSS = "GRND";
        D   = "D";
        CK  = "CK";
    };

    SDFFRS_X2 =
    {
        SDFFRS_X2 = "";
        QN  = "";
        SN  = "";
        SE  = "";
        RN  = "";
        VDD = "";
        Q   = "";
        SI  = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    SDFFR_X1 =
    {
        SDFFR_X1 = "";
        QN  = "";
        SE  = "";
        RN  = "";
        VDD = "";
        Q   = "";
        SI  = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    SDFFR_X2 =
    {
        SDFFR_X2 = "";
        QN  = "";
        SE  = "";
        RN  = "";
        VDD = "";
        Q   = "";
        SI  = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    SDFFS_X1 =
    {
        SDFFS_X1 = "";
        QN  = "";
        SN  = "";
        SE  = "";
        VDD = "";
        Q   = "";
        SI  = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    SDFFS_X2 =
    {
        SDFFS_X2 = "";
        QN  = "";
        SN  = "";
        SE  = "";
        VDD = "";
        Q   = "";
        SI  = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    SDFF_X1 =
    {
        SDFF_X1 = "";
        QN  = "QN";
        SE  = "";
        VDD = "";
        Q   = "Q";
        SI  = "";
        VSS = "";
        D   = "D";
        CK  = "";
    };

    SDFF_X2 =
    {
        SDFF_X2 = "";
        QN  = "";
        SE  = "";
        VDD = "";
        Q   = "";
        SI  = "";
        VSS = "";
        D   = "";
        CK  = "";
    };

    TBUF_X1 =
    {
        TBUF_X1 = "TBUFX1";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        EN  = "OE";
    };

    TBUF_X16 =
    {
        TBUF_X16 = "";
        Z   = "";
        A   = "";
        VDD = "";
        VSS = "";
        EN  = "";
    };

    TBUF_X2 =
    {
        TBUF_X2 = "TBUFX2";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        EN  = "OE";
    };

    TBUF_X4 =
    {
        TBUF_X4 = "TBUFX4";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        EN  = "OE";
    };

    TBUF_X8 =
    {
        TBUF_X8 = "TBUFX8";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        EN  = "OE";
    };

    TINV_X1 =
    {
        TINV_X1 = "TINVX1";
        VDD = "POWR";
        VSS = "GRND";
        I   = "A";
        ZN  = "Y";
        EN  = "OE";
    };

    TLAT_X1 =
    {
        TLAT_X1 = "";
        VDD = "";
        Q   = "";
        VSS = "";
        D   = "";
        OE  = "";
        G   = "";
    };

    XNOR2_X1 =
    {
        XNOR2_X1 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
    };

    XNOR2_X2 =
    {
        XNOR2_X2 = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
        ZN  = "";
    };

    XOR2_X1 =
    {
        XOR2_X1 = "XOR2X1";
        Z   = "Y";
        A   = "A";
        VDD = "POWR";
        VSS = "GRND";
        B   = "B";
    };

    XOR2_X2 =
    {
        XOR2_X2 = "";
        Z   = "";
        A   = "";
        VDD = "";
        VSS = "";
        B   = "";
    };

    //TLATSRX1
};
