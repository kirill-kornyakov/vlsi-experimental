#ifndef __CLUSTERING_DATA__
#define __CLUSTERING_DATA__

struct Cluster
{
  std::vector<HCell> cells;
  double xCoord;  // РµРіРѕ РєРѕРѕСЂРґРёРЅР°С‚С‹
  double yCoord;
  double area;    // Р·Р°РЅРёРјР°РµРјР°СЏ РїР»РѕС‰Р°РґСЊ (= СЃСѓРјРјР° РїР»РѕС‰Р°РґРµР№ РІСЃРµС… СЌР»РµРјРµРЅС‚РѕРІ РєР»Р°СЃС‚РµСЂР°)
  double potentialMultiplier; 
  bool   isValid; //РїСЂРёРјРµРЅСЏРµС‚СЃСЏ РІ Р°Р»РіРѕСЂРёС‚РјРµ РєР»Р°СЃС‚РµСЂРёР·Р°С†РёРё. РµСЃР»Рё true, С‚Рѕ РїРµСЂРµСЃС‡РёС‚С‹РІР°С‚СЊ score 
                  //РґР»СЏ РґР°РЅРЅРѕРіРѕ РєР»Р°СЃС‚РµСЂР° РЅРµ РЅСѓР¶РЅРѕ, РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ score РїРµСЂРµСЃС‡РёС‚С‹РІР°РµС‚СЃСЏ, 
                  //Рё СЌР»РµРјРµРЅС‚ РїРѕРјРµС‰Р°РµС‚СЃСЏ РІ РѕС‡РµСЂРµРґСЊ (Heap) РґР»СЏ РєР»Р°СЃС‚РµСЂРёР·Р°С†РёРё РЅР° С‚Рѕ
                  //РјРµСЃС‚Рѕ, Рє-РјСѓ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ РµРіРѕ РЅРѕРІС‹Р№ score. РґР»СЏ СЌС‚РѕРіРѕ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ С„-РёСЏ InsertInHeap
  bool   isFake;  //РїСЂРё СЃР»РёСЏРЅРёРё РґРІСѓС… РєР»Р°СЃС‚РµСЂРѕРІ СЂРµР·СѓР»СЊС‚Р°С‚ РїРѕРјРµС‰Р°РµС‚СЃСЏ РІ РїРµСЂРІС‹Р№ РёР· РЅРёС…, 
                  //Р° РІС‚РѕСЂРѕР№ РїРѕРјРµС‡Р°РµС‚СЃСЏ РєР°Рє Fake
  
  Cluster()
  {
    xCoord = yCoord = 0.0;
    area = 0.0;
    isFake = false;
    isValid = true;
  }
};

struct MergeCandidate
{
  int clusterIdx;
  int bestNeighborIdx;
  double score;

  MergeCandidate()
  {
    score = 0.0;
    bestNeighborIdx = -1;
    clusterIdx = -1;
  }
};

// РІРѕ РІСЂРµРјСЏ РєР»Р°СЃС‚РµСЂРёР·Р°С†РёРё РІРµРґРµС‚СЃСЏ Р»РѕРі РєР»Р°СЃС‚РµСЂРёР·Р°С†РёРё (clusteringLog) РґР»СЏ С‚РѕРіРѕ, С‡С‚РѕР±С‹ РїРѕС‚РѕРј 
// РїРѕ РЅРµРјСѓ РѕС‚РєР°С‚РёС‚СЊСЃСЏ РЅР°Р·Р°Рґ РЅР° РїСЂРµРґС‹РґСѓС‰РёР№ СѓСЂРѕРІРµРЅСЊ РєР»Р°СЃС‚РµСЂРёР·Р°С†РёРё.
// РґР°РЅРЅС‹Рµ, Рє-С‹Рµ РґРѕСЃС‚Р°С‚РѕС‡РЅРѕ Р·Р°РЅРµСЃС‚Рё РІ Р¶СѓСЂРЅР°Р» РєР»Р°СЃС‚РµСЂРёР·Р°С†РёРё РїСЂРё РєР»Р°СЃС‚РµСЂРёР·Р°С†РёРё РґРІСѓС… РєР»Р°СЃС‚РµСЂРѕРІ, 
// РјРѕР¶РЅРѕ РїСЂРµРґСЃС‚Р°РІРёС‚СЊ СЃР»РµРґСѓСЋС‰РµР№ СЃС‚СЂСѓРєС‚СѓСЂРѕР№
struct MergedCluster
{
  int cluster1Idx;
  int cluster2Idx;
  size_t nCellsInCluster1;
};

class ClusteredNet
{
public:
  std::vector<int> clusterIdxs;
  
  double weight;
  double k;

  ClusteredNet()
  {
    weight = 1.0;
    k      = 1;
  }
  ClusteredNet& operator=(const ClusteredNet& cn)
  {
    this->weight      = cn.weight;
    this->k           = cn.k;
    this->clusterIdxs = cn.clusterIdxs;
    return *this;
  }
};

typedef std::list<MergedCluster> ClusteringLog;
typedef std::list<ClusteringLog>::reverse_iterator ClusteringLogIterator;

typedef std::vector<ClusteredNet> NetList;  //перечень существующих соединений между кластерами
typedef std::list<NetList>::reverse_iterator NetListIterator;

typedef std::vector<int> ConnectionsVector;// перечень индексов соединений, в которые входит текущий кластер

typedef double (*pAffinityFunction)(HDesign& hd, 
                                    const int& firstClusterIdx, const int& secondClusterIdx,
                                    std::vector<Cluster>& clusters, NetList& netList, int* netListSizes,
                                    std::vector<ConnectionsVector>& currTableOfAdjacentNets);

#endif